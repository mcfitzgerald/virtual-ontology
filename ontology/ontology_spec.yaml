# MES Manufacturing Ontology - Lean Version
# Simplified for practical LLM-based SQL generation

# ====================================================================================
# ONTOLOGY METADATA
# ====================================================================================
ontology:
  name: "MES Manufacturing Ontology"
  version: "2.0"
  namespace: "mes"
  description: "Manufacturing execution system tracking production, equipment, and downtime"
  
  # Related ontologies in your ecosystem
  related_ontologies:
    - namespace: "erp"
      description: "ERP system handles orders and inventory"
      shared_concepts: ["Product", "ProductionOrder"]
    - namespace: "quality"
      description: "Quality system tracks defects and inspections"
      shared_concepts: ["Product", "QualityScore"]
    - namespace: "maintenance"
      description: "Maintenance system schedules equipment service"
      shared_concepts: ["Equipment", "PreventiveMaintenance"]
    
  # Business context
  domain: "manufacturing"
  owner: "Production Team"
  created: "2024-01-01"
  modified: "2024-01-15"

# ====================================================================================
# CLASSES (Business Entities)
# ====================================================================================
classes:
  Process:
    description: "Manufacturing workflow that transforms materials into products"
    subclasses:
      ProductionOrder:
        description: "Customer order being manufactured"
        maps_to:
          erp: "SalesOrder"
        
  Resource:
    description: "Assets used in production"
    subclasses:
      Equipment:
        description: "Machines that process materials"
        maps_to:
          erp: "FixedAsset"
          maintenance: "ServiceableAsset"
        subclasses:
          Filler:
            description: "Fills containers with product"
            conditions:
              - field: "EquipmentType"
                operator: "equals"
                value: "Filler"
          Packer:
            description: "Groups containers into cases"
            conditions:
              - field: "EquipmentType"
                operator: "equals"
                value: "Packer"
          Palletizer:
            description: "Stacks cases onto pallets"
            conditions:
              - field: "EquipmentType"
                operator: "equals"
                value: "Palletizer"
                
      ProductionLine:
        description: "Set of equipment working in sequence"
        
      Product:
        description: "Items we manufacture"
        maps_to:
          erp: "InventoryItem"
          quality: "InspectableProduct"
          
  Event:
    description: "Time-stamped production activity"
    subclasses:
      ProductionLog:
        description: "Production metrics when running"
        conditions:
          - field: "MachineStatus"
            operator: "equals"
            value: "Running"
            
      DowntimeLog:
        description: "Equipment stoppage event"
        conditions:
          - field: "MachineStatus"
            operator: "equals"
            value: "Stopped"
            
  Reason:
    description: "Explanation for events"
    subclasses:
      DowntimeReason:
        description: "Why equipment stopped"
        subclasses:
          PlannedDowntime:
            description: "Scheduled stops"
            conditions:
              - field: "DowntimeReason"
                operator: "contains"
                value: "PLN-"
            subclasses:
              Changeover:
                description: "Switching products"
                conditions:
                  - field: "DowntimeReason"
                    operator: "equals"
                    value: "PLN-CO"
              Cleaning:
                description: "Sanitation cycle"
                conditions:
                  - field: "DowntimeReason"
                    operator: "equals"
                    value: "PLN-CLN"
              PreventiveMaintenance:
                description: "Scheduled service"
                conditions:
                  - field: "DowntimeReason"
                    operator: "equals"
                    value: "PLN-PM"
                    
          UnplannedDowntime:
            description: "Unexpected stops"
            conditions:
              - field: "DowntimeReason"
                operator: "contains"
                value: "UNP-"
            subclasses:
              MechanicalFailure:
                description: "Equipment breakdown"
                conditions:
                  - field: "DowntimeReason"
                    operator: "equals"
                    value: "UNP-MECH"
              MaterialJam:
                description: "Product blockage"
                conditions:
                  - field: "DowntimeReason"
                    operator: "equals"
                    value: "UNP-JAM"
              MaterialStarvation:
                description: "No input material"
                conditions:
                  - field: "DowntimeReason"
                    operator: "equals"
                    value: "UNP-MAT"

# ====================================================================================
# RELATIONSHIPS (How entities connect)
# ====================================================================================
relationships:
  isUpstreamOf:
    from: "Equipment"
    to: "Equipment"
    description: "Material flows from upstream to downstream equipment"
    type: "one-to-many"
    sql_hint: "e1.downstream_equipment_id = e2.equipment_id"
    inverse: "isDownstreamOf"
    
  belongsToLine:
    from: "Equipment"
    to: "ProductionLine"
    description: "Equipment is part of a production line"
    type: "many-to-one"
    sql_hint: "equipment.line_id = production_line.id"
    inverse: "hasEquipment"
    
  executesOrder:
    from: "Equipment"
    to: "ProductionOrder"
    description: "Equipment is currently working on this order"
    type: "many-to-one"
    sql_hint: "equipment.current_order_id = orders.id"
    
  producesProduct:
    from: "ProductionOrder"
    to: "Product"
    description: "Order specifies which product to make"
    type: "many-to-one"
    sql_hint: "orders.product_id = products.id"
    
  logsEvent:
    from: "Equipment"
    to: "Event"
    description: "Equipment generates event logs"
    type: "one-to-many"
    sql_hint: "equipment.id = events.equipment_id"
    
  hasDowntimeReason:
    from: "DowntimeLog"
    to: "DowntimeReason"
    description: "Downtime event has a specific reason"
    type: "many-to-one"
    sql_hint: "events.downtime_reason_code = reasons.code"

# ====================================================================================
# PROPERTIES (Data attributes)
# ====================================================================================
properties:
  # Identifiers
  hasTimestamp:
    class: "Event"
    type: "datetime"
    description: "When the event occurred"
    sql_column: "timestamp"
    required: true
    
  hasOrderID:
    class: "ProductionOrder"
    type: "string"
    description: "Unique order identifier"
    sql_column: "production_order_id"
    required: true
    unique: true
    examples: ["ORD-1000", "ORD-1001"]
    
  hasLineID:
    class: "ProductionLine"
    type: "string"
    description: "Production line number"
    sql_column: "line_id"
    validation:
      values: ["1", "2", "3"]
    
  hasEquipmentID:
    class: "Equipment"
    type: "string"
    description: "Unique equipment identifier"
    sql_column: "equipment_id"
    required: true
    unique: true
    examples: ["LINE1-FIL", "LINE2-PCK"]
    
  hasProductID:
    class: "Product"
    type: "string"
    description: "Product SKU"
    sql_column: "product_id"
    business_name: "SKU"
    examples: ["SKU-2001", "SKU-2002"]
    
  hasProductName:
    class: "Product"
    type: "string"
    description: "Product description"
    sql_column: "product_name"
    examples: ["12oz Soda", "16oz Energy Drink"]
    
  hasEquipmentType:
    class: "Equipment"
    type: "string"
    description: "Type of equipment"
    sql_column: "equipment_type"
    validation:
      values: ["Filler", "Packer", "Palletizer"]
    business_name: "Equipment Type"
    
  # Status and reasons
  hasMachineStatus:
    class: "Event"
    type: "string"
    description: "Equipment running or stopped"
    sql_column: "machine_status"
    validation:
      values: ["Running", "Stopped"]
    
  hasDowntimeReason:
    class: "DowntimeLog"
    type: "string"
    description: "Code explaining why stopped"
    sql_column: "downtime_reason"
    examples: ["PLN-CO", "UNP-JAM", "PLN-PM"]
    
  # Production metrics
  hasGoodUnitsProduced:
    class: "ProductionLog"
    type: "integer"
    description: "Sellable units produced"
    sql_column: "good_units_produced"
    unit: "units per 5 min"
    validation:
      min: 0
    
  hasScrapUnitsProduced:
    class: "ProductionLog"
    type: "integer"
    description: "Defective units produced"
    sql_column: "scrap_units_produced"
    unit: "units per 5 min"
    validation:
      min: 0
    
  hasTargetRateUnitsPer5min:
    class: "Product"
    type: "integer"
    description: "Expected production rate"
    sql_column: "target_rate_units_per_5min"
    unit: "units per 5 min"
    business_name: "Standard Rate"
    
  # Financial
  hasStandardCostPerUnit:
    class: "Product"
    type: "float"
    description: "Manufacturing cost"
    sql_column: "standard_cost_per_unit"
    unit: "USD"
    
  hasSalePricePerUnit:
    class: "Product"
    type: "float"
    description: "Selling price"
    sql_column: "sale_price_per_unit"
    unit: "USD"
    
  # KPIs
  hasAvailabilityScore:
    class: "Event"
    type: "float"
    description: "Percent of time available for production"
    sql_column: "availability_score"
    unit: "percent"
    validation:
      min: 0
      max: 100
    business_name: "Availability %"
    
  hasPerformanceScore:
    class: "Event"
    type: "float"
    description: "Speed compared to ideal"
    sql_column: "performance_score"
    unit: "percent"
    validation:
      min: 0
      max: 100
    business_name: "Performance %"
    
  hasQualityScore:
    class: "Event"
    type: "float"
    description: "Percent of good units"
    sql_column: "quality_score"
    unit: "percent"
    validation:
      min: 0
      max: 100
    business_name: "Quality %"
    
  hasOEEScore:
    class: "Event"
    type: "float"
    description: "Overall Equipment Effectiveness"
    sql_column: "oee_score"
    unit: "percent"
    validation:
      min: 0
      max: 100
    business_name: "OEE"

# ====================================================================================
# BUSINESS RULES
# ====================================================================================
business_rules:
  OEE_Calculation:
    description: "OEE is product of availability, performance, and quality"
    when:
      class: "Event"
      condition: "Has all three component scores"
    implies: "OEE = (Availability × Performance × Quality) / 10000"
    sql_hint: "availability_score * performance_score * quality_score / 10000"
    
  Downstream_Starvation:
    description: "Downstream equipment stops when upstream stops"
    when:
      class: "Equipment"
      condition: "Upstream equipment has stopped"
    implies: "Downstream may show MaterialStarvation"
    sql_hint: "Check for UNP-MAT in downstream equipment at same time"
    
  Quality_Impact:
    description: "Quality score affects financial performance"
    when:
      class: "ProductionLog"
      condition: "Scrap units > 0"
    implies: "Lost revenue = scrap_units × sale_price"
    sql_hint: "scrap_units_produced * sale_price_per_unit"

# ====================================================================================
# CROSS-SYSTEM MAPPINGS
# ====================================================================================
system_mappings:
  ERP:
    type: "SAP"
    namespace: "erp"
    mappings:
      - our_concept: "ProductionOrder"
        their_concept: "ProductionOrder"
        join_key: "order_id"
        notes: "Same order ID in both systems"
      - our_concept: "Product"
        their_concept: "Material"
        join_key: "product_id"
        notes: "Their material_number = our SKU"
        
  QualitySystem:
    type: "Custom"
    namespace: "quality"
    mappings:
      - our_concept: "Product"
        their_concept: "InspectionItem"
        join_key: "product_id"
      - our_concept: "hasQualityScore"
        their_concept: "PassRate"
        notes: "Calculate from their inspection results"

# ====================================================================================
# COMMON QUERIES
# ====================================================================================
common_queries:
  - name: "Current OEE by Line"
    question: "What is the OEE for each production line?"
    involves: ["ProductionLine", "Equipment", "hasOEEScore"]
    sql_pattern: |
      SELECT line_id, AVG(oee_score) as avg_oee
      FROM mes_data
      WHERE machine_status = 'Running'
        AND timestamp >= NOW() - INTERVAL '1 hour'
      GROUP BY line_id
      
  - name: "Bottleneck Analysis"
    question: "Which equipment limits production on each line?"
    involves: ["Equipment", "hasPerformanceScore", "belongsToLine"]
    sql_pattern: |
      SELECT line_id, equipment_id, MIN(performance_score)
      FROM mes_data
      WHERE machine_status = 'Running'
      GROUP BY line_id
      
  - name: "Downtime Pareto"
    question: "What are the top causes of unplanned downtime?"
    involves: ["UnplannedDowntime", "hasDowntimeReason"]
    sql_pattern: |
      SELECT downtime_reason, COUNT(*) as occurrences
      FROM mes_data
      WHERE machine_status = 'Stopped'
        AND downtime_reason LIKE 'UNP-%'
      GROUP BY downtime_reason
      ORDER BY occurrences DESC

# ====================================================================================
# GLOSSARY
# ====================================================================================
glossary:
  OEE:
    definition: "Overall Equipment Effectiveness - measure of manufacturing productivity"
    also_known_as: ["Overall Equipment Efficiency"]
    see_also: ["Availability", "Performance", "Quality"]
    
  Changeover:
    definition: "Time to switch production from one product to another"
    also_known_as: ["Setup", "Product Switch"]
    
  MaterialStarvation:
    definition: "Equipment cannot run because upstream equipment isn't providing material"
    also_known_as: ["Starved", "No Input"]
    
  Bottleneck:
    definition: "Equipment that limits the production rate of the entire line"
    also_known_as: ["Constraint", "Limiting Factor"]