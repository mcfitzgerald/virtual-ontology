# Simple E-Commerce Ontology Example
# This example demonstrates a basic ontology for an online store

ontology:
  name: "Simple E-Commerce Ontology"
  version: "1.0"
  iri: "http://example.com/ontology/ecommerce#"
  
  "@context":
    "@base": "http://example.com/ontology/ecommerce#"
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#"
    "schema": "http://schema.org/"
    
  description: "A simple ontology for e-commerce demonstrating products, customers, and orders"
  authors:
    - name: "John Doe"
      email: "john@example.com"
  created: "2024-01-15"
  modified: "2024-01-15"
  
  tags:
    - "e-commerce"
    - "retail"

# Classes (TBox)
classes:
  Entity:
    uri: "http://example.com/ontology/ecommerce#Entity"
    description: "Base class for all entities in the system"
    
    subclasses:
      Product:
        uri: "http://example.com/ontology/ecommerce#Product"
        description: "Items available for purchase"
        equivalent_to:
          - "http://schema.org/Product"
        
      Customer:
        uri: "http://example.com/ontology/ecommerce#Customer"
        description: "People or organizations that make purchases"
        equivalent_to:
          - "http://schema.org/Person"
          
      Order:
        uri: "http://example.com/ontology/ecommerce#Order"
        description: "A customer's purchase transaction"
        equivalent_to:
          - "http://schema.org/Order"

# Object Properties (RBox)
object_properties:
  placedBy:
    uri: "http://example.com/ontology/ecommerce#placedBy"
    domain: "Order"
    range: "Customer"
    description: "Links an order to the customer who placed it"
    inverse: "hasPlacedOrder"
    functional: true  # An order has exactly one customer
    
  hasPlacedOrder:
    uri: "http://example.com/ontology/ecommerce#hasPlacedOrder"
    domain: "Customer"
    range: "Order"
    description: "Links a customer to their orders"
    
  containsProduct:
    uri: "http://example.com/ontology/ecommerce#containsProduct"
    domain: "Order"
    range: "Product"
    description: "Products included in an order"
    cardinality:
      min: 1  # Order must have at least one product

# Data Properties
data_properties:
  productName:
    uri: "http://example.com/ontology/ecommerce#productName"
    domain: "Product"
    range: "xsd:string"
    description: "The name of the product"
    sql_column: "name"
    constraints:
      required: true
      max_length: 255
    
  price:
    uri: "http://example.com/ontology/ecommerce#price"
    domain: "Product"
    range: "xsd:decimal"
    description: "The selling price of the product"
    sql_column: "price"
    constraints:
      required: true
      min_value: 0
    unit:
      uri: "http://qudt.org/vocab/unit/USD"
      label: "US Dollars"
    
  customerEmail:
    uri: "http://example.com/ontology/ecommerce#customerEmail"
    domain: "Customer"
    range: "xsd:string"
    description: "Customer's email address"
    sql_column: "email"
    constraints:
      required: true
      unique: true
      pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
    
  orderDate:
    uri: "http://example.com/ontology/ecommerce#orderDate"
    domain: "Order"
    range: "xsd:dateTime"
    description: "When the order was placed"
    sql_column: "created_at"
    
  orderStatus:
    uri: "http://example.com/ontology/ecommerce#orderStatus"
    domain: "Order"
    range: "xsd:string"
    description: "Current status of the order"
    sql_column: "status"
    constraints:
      enum: ["pending", "processing", "shipped", "delivered", "cancelled"]

# Competency Questions
competency_questions:
  - question: "What products has a specific customer ordered?"
    expected_concepts: ["Customer", "Order", "Product", "placedBy", "containsProduct"]
    example_sql: |
      SELECT p.name 
      FROM products p
      JOIN order_items oi ON p.id = oi.product_id
      JOIN orders o ON oi.order_id = o.id
      JOIN customers c ON o.customer_id = c.id
      WHERE c.email = ?
      
  - question: "What is the total revenue from delivered orders?"
    expected_concepts: ["Order", "orderStatus", "price"]
    example_sql: |
      SELECT SUM(oi.quantity * p.price)
      FROM order_items oi
      JOIN products p ON oi.product_id = p.id
      JOIN orders o ON oi.order_id = o.id
      WHERE o.status = 'delivered'